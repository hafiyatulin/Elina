import telebot
from telebot import types
import json
import os
from datetime import datetime

API_TOKEN = '7782481709:AAH6Nk_KnBSK3zOJtwoDQ4uOMjjfThJ5h20'
parent_id = 778248170  # Telegram ID —Ä–æ–¥–∏—Ç–µ–ª—è

bot = telebot.TeleBot(API_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞
if os.path.exists("data.json"):
    with open("data.json", "r") as f:
        data = json.load(f)
else:
    data = {
        "balance": 0,
        "tasks": {
            "—á—Ç–µ–Ω–∏–µ": 3,
            "–ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ": 4,
            "—É–±–æ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ": 3,
            "—É–±–æ—Ä–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ": 5,
            "—á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤": 2,
            "—Å–ø–æ—Ä—Ç": 4,
            "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ": 3,
            "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": 4,
            "–¥—É—à": 3,
            "—É–±—Ä–∞—Ç—å –ª–æ—Ç–æ–∫": 3,
            "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–æ–≤": 2,
            "–ø–æ–º–æ—â—å –º–∞–º–µ": 5,
            "–∑–∞—Å—Ç–µ–ª–∏—Ç—å –ø–æ—Å—Ç–µ–ª—å": 2
        },
        "rewards": {
            "15–º–∏–Ω—É—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ": 15
        },
        "stats": {},
        "log": {},
        "actions": [],
        "last_reset": datetime.now().strftime("%Y-%m-%d")
    }

def save_data():
    with open("data.json", "w") as f:
        json.dump(data, f)
daily_goals = {
    "—á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤": {"target": 2, "count": 0},
    "–∑–∞—Å—Ç–µ–ª–∏—Ç—å –ø–æ—Å—Ç–µ–ª—å": {"target": 1, "count": 0},
    "—á—Ç–µ–Ω–∏–µ": {"target": 30, "minutes": 0},
    "–ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ": {"target": 30, "minutes": 0}
}

def reset_daily_goals():
    for key in daily_goals:
        daily_goals[key]["count"] = 0
        if "minutes" in daily_goals[key]:
            daily_goals[key]["minutes"] = 0
    data["last_reset"] = datetime.now().strftime("%Y-%m-%d")
    save_data()

def get_level_name(score):
    if score >= 250:
        return "–ß–µ–º–ø–∏–æ–Ω —Å–µ–º—å–∏ üèÜ"
    elif score >= 150:
        return "–°—É–ø–µ—Ä–≥–µ—Ä–æ–π üí™"
    elif score >= 80:
        return "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π üéñ"
    elif score >= 30:
        return "–ü–æ–º–æ—â–Ω–∏–∫ ‚ú®"
    else:
        return "–ù–æ–≤–∏—á–æ–∫ üë∂"

def check_level_up(message, old_score, new_score):
    old_level = get_level_name(old_score)
    new_level = get_level_name(new_score)
    if old_level != new_level:
        bot.reply_to(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è: {new_level}")

def check_daily_goals(message):
    today = datetime.now().strftime("%Y-%m-%d")
    goals_met = True

    if daily_goals["—á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤"]["count"] < 2:
        goals_met = False
    if daily_goals["–∑–∞—Å—Ç–µ–ª–∏—Ç—å –ø–æ—Å—Ç–µ–ª—å"]["count"] < 1:
        goals_met = False
    if daily_goals["—á—Ç–µ–Ω–∏–µ"]["minutes"] < 30:
        goals_met = False
    if daily_goals["–ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ"]["minutes"] < 30:
        goals_met = False

    if goals_met:
        reward_minutes = int(daily_goals["—á—Ç–µ–Ω–∏–µ"]["minutes"] * 2)
        data["log"][today] = {"completed": True, "reward_minutes": reward_minutes}
        bot.reply_to(message, f"üéâ –£—Ä–∞! –í—Å–µ —Ü–µ–ª–∏ –¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {reward_minutes} –º–∏–Ω—É—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ!")
    else:
        data["log"][today] = {"completed": False, "reward_minutes": 0}

    save_data()
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è")
    btn2 = types.KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    btn3 = types.KeyboardButton("üìà –ë–∞–ª–∞–Ω—Å")
    btn4 = types.KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")
    btn5 = types.KeyboardButton("üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup=markup)

@bot.message_handler(commands=['–∑–∞–¥–∞–Ω–∏—è'])
def show_tasks(message):
    if not data["tasks"]:
        bot.reply_to(message, "–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –†–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å.")
    else:
        response = "–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
        for task, points in data["tasks"].items():
            response += f"‚Äì {task} ({points} –±–∞–ª–ª–æ–≤)\n"
        bot.reply_to(message, response)

@bot.message_handler(commands=['–±–∞–ª–∞–Ω—Å'])
def show_balance(message):
    bot.reply_to(message, f"–£ —Ç–µ–±—è {data['balance']} –±–∞–ª–ª–æ–≤")

@bot.message_handler(commands=['—Ä–µ–π—Ç–∏–Ω–≥'])
def show_rating(message):
    if not data.get("stats"):
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    sorted_tasks = sorted(data["stats"].items(), key=lambda x: x[1]["points"], reverse=True)
    response = "üìä –†–µ–π—Ç–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π:\n"
    for i, (task, stat) in enumerate(sorted_tasks, 1):
        response += f"{i}. {task.title()} ‚Äî {stat['count']} —Ä–∞–∑ ({stat['points']} –±–∞–ª–ª–æ–≤)\n"
    bot.reply_to(message, response)

@bot.message_handler(commands=['–ø—Ä–æ–≥—Ä–µ—Å—Å'])
def show_progress(message):
    log = data.get("log", {})
    if not log:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
        return

    days = list(log.items())[-7:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    response = "üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n"
    for date_str, info in days:
        mark = "‚úÖ" if info["completed"] else "‚ùå"
        response += f"{date_str}: {mark}  ({info['reward_minutes']} –º–∏–Ω)\n"
    bot.reply_to(message, response)
  @bot.message_handler(commands=['–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'])
def mark_done(message):
    if data.get("last_reset") != datetime.now().strftime("%Y-%m-%d"):
        reset_daily_goals()

    args = message.text.replace('/–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '').strip().lower().split()
    if not args:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: /–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á—Ç–µ–Ω–∏–µ 30")
        return

    task = args[0]
    minutes = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    time_based = {
        "—á—Ç–µ–Ω–∏–µ": 0.15,
        "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": 0.2,
        "—Å–ø–æ—Ä—Ç": 0.13,
        "–ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ": 0.13
    }

    if task in data["tasks"]:
        if task in time_based and minutes:
            points = round(minutes * time_based[task])
            if task in daily_goals:
                daily_goals[task]["minutes"] += minutes
        else:
            points = data["tasks"][task]
            if task in daily_goals and "count" in daily_goals[task]:
                daily_goals[task]["count"] += 1

        old_score = data["balance"]
        data["balance"] += points
        check_level_up(message, old_score, data["balance"])

        # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if task not in data["stats"]:
            data["stats"][task] = {"count": 0, "points": 0}
        data["stats"][task]["count"] += 1
        data["stats"][task]["points"] += points

        # –ª–æ–≥
        timestamp = datetime.now().strftime("%H:%M")
        entry = f"{timestamp} ‚Äî {message.from_user.first_name}: {task} (+{points})"
        data["actions"].append(entry)
        if str(message.from_user.id) != str(parent_id):
            bot.send_message(parent_id, f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {entry}")

        save_data()
        bot.reply_to(message, f"–ú–æ–ª–æ–¥–µ—Ü! +{points} –±–∞–ª–ª–æ–≤. –ë–∞–ª–∞–Ω—Å: {data['balance']}")

        check_daily_goals(message)
    else:
        bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å /–∑–∞–¥–∞–Ω–∏—è")

@bot.message_handler(commands=['–ª–æ–≥'])
def show_log(message):
    if str(message.from_user.id) != str(parent_id):
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—é.")
        return
    log = data.get("actions", [])
    if not log:
        bot.reply_to(message, "–õ–æ–≥ –ø—É—Å—Ç.")
    else:
        response = "\n".join(log[-10:])
        bot.reply_to(message, f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n{response}")

# –ö–Ω–æ–ø–∫–∏ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    text = message.text.strip()

    if text == "üìã –ó–∞–¥–∞–Ω–∏—è":
        show_tasks(message)
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á—Ç–µ–Ω–∏–µ 30")
    elif text == "üìà –ë–∞–ª–∞–Ω—Å":
        show_balance(message)
    elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        show_rating(message)
    elif text == "üìÖ –ü—Ä–æ–≥—Ä–µ—Å—Å":
        show_progress(message)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
